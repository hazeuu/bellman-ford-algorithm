#include<iostream>
#include<vector>
#include <algorithm>
using namespace std;

typedef long long ll;

const int MaxN = 1 + 1e2;
const ll INF = 1e18;

int n, m, s, mark[MaxN];
ll dist[MaxN];
vector<int> parent(MaxN);

class Edge{
    public:
        int u, v, weight;

        Edge(int _u, int _v, int _weight): u(_u), v(_v), weight(_weight){}
};

vector<Edge> edges;

void printPath(int j) {
    if (j == s) {
        cout << j << " ";
        return;
    }
    printPath(parent[j]);
    cout << j << " ";
}

void Bellman_Ford(){
    fill(dist + 1, dist + n + 1, INF);
    dist[s] = 0;

    for(int i = 1; i <= n; i++){
        for(Edge e : edges){
            if(dist[e.u] + e.weight < dist[e.v]){
                // Tại lần cập nhật thứ n, nếu đỉnh vẫn được cập nhật nghĩa là nó thuộc chu trình âm và ta đánh dấu nó 
                if(i == n) mark[e.v] = 1;
                dist[e.v] = dist[e.u] + e.weight;
                parent[e.v] = e.u;
            }
        }
    }
}

int main(){
    freopen("Bellmanford.inp","r",stdin);
    freopen("Bellmanford.out","w",stdout);
    cin >> n >> m >> s;
    for(int i = 1; i <= m; i++){
        int u, v, weight;
        cin >> u >> v >> weight;
        edges.push_back(Edge(u, v, weight));
    }
    Bellman_Ford();
    for(int i = 1; i <= n; i++) {
        cout << "=== Dinh " << i << endl;
        if(mark[i]) cout <<-2<< endl;
        else 
             if(dist[i] == INF) cout << "Khong co duong di tu dinh " << s << " den dinh " << i << endl;
             else {
                cout << "d( " << s << " -> " << i << " ) = " << dist[i] << endl;
                cout << "Duong di: ";
                printPath(i);
                cout << endl;
            }
    }
    return 0;
}
